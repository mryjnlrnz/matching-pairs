{"version":3,"sources":["components/Header.js","components/Card.js","App.js","index.js"],"names":["Header","moves","resetGame","onClick","icon","faRedo","Card","flip","cardClass","i","card","className","faQuestion","cardsArray","faReact","faAngular","faVuejs","faNodeJs","faGithub","faPhp","App","useState","cards","setCards","cardsToMatch","setCardsToMatch","matchedCard","setMatchedCard","setMoves","gameWon","setGameWon","useEffect","shuffle","sort","Math","random","openedCards","some","id","includes","length","push","name","compare","solvedCards","incrementMoves","cardToMatch","map","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wQAqBeA,MAjBf,YAAqC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,UACtB,OACE,mCACE,gCACE,wCAAWD,KACX,wBACEE,QAAS,kBAAMD,KADjB,SAGE,cAAC,IAAD,CAAiBE,KAAMC,WAI3B,kECDSC,MAXf,YAA2C,IAA5BC,EAA2B,EAA3BA,KAAMC,EAAqB,EAArBA,UAAWC,EAAU,EAAVA,EAAGC,EAAO,EAAPA,KACjC,OACE,qBACEP,QAAS,kBAAMI,EAAKE,EAAGC,IACvBC,UAAWH,EAAUC,EAAGC,GAF1B,SAIE,cAAC,IAAD,CAAiBN,KAAMI,EAAUC,EAAGC,GAAQA,EAAOE,SCGnDC,EAAa,CACjBC,IACAA,IACAC,IACAA,IACAC,IACAA,IACAC,IACAA,IACAC,IACAA,IACAC,IACAA,KAkGaC,MA/Ff,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,OAE2BF,mBAAS,IAFpC,mBAENG,EAFM,KAEQC,EAFR,OAGyBJ,mBAAS,IAHlC,mBAGNK,EAHM,KAGOC,EAHP,OAIaN,mBAAS,GAJtB,mBAINpB,EAJM,KAIC2B,EAJD,OAKiBP,oBAAS,GAL1B,mBAKNQ,EALM,KAKGC,EALH,KAQbC,qBAAU,WACRR,EAASS,EAAQnB,MAChB,IAGH,IAAMmB,EAAU,SAAAV,GACd,OAAOA,EAAMW,MAAK,kBAAMC,KAAKC,SAAW,OAGpC5B,EAAO,SAACE,EAAGC,GACf,IAAI0B,EAAW,YAAOZ,GACIY,EAAYC,MAAK,SAAA3B,GAAI,OAAIA,EAAK4B,KAAO7B,MAEtCiB,EAAYa,SAAS7B,KAEnB,IAAvB0B,EAAYI,SAAcJ,EAAc,IAE5CA,EAAYK,KAAK,CACfH,GAAI7B,EACJiC,KAAMhC,IAERe,EAAgBW,GAGW,IAAvBA,EAAYI,QAAcG,EAAQP,KAGlCO,EAAU,SAACP,GACf,IAAMQ,EAAclB,EAEpBmB,IAGIT,EAAY,GAAGM,OAASN,EAAY,GAAGM,OACzCE,EAAYH,KAAKL,EAAY,GAAGM,MAChCf,EAAeiB,GACfnB,EAAgB,KAGdC,EAAYc,SAAYlB,EAAMkB,OAAS,GAAIV,GAAW,IAGtDe,EAAiB,kBAAMjB,EAAS3B,EAAQ,IAUxCO,EAAY,SAACC,EAAGC,GACpB,OAAIgB,EAAYa,SAAS7B,GAAc,eACnCc,EAAaa,MAAK,SAAAS,GAAW,OAAIA,EAAYR,KAAO7B,KAAW,iBAAnE,GAGF,OACE,sBAAKE,UAAS,cAASkB,EAAU,WAAa,IAA9C,UAEE,cAAC,EAAD,CACE5B,MAAOA,EACPC,UAlBY,WAChB0B,EAAS,GACTL,EAASS,EAAQnB,IACjBY,EAAgB,IAChBE,EAAe,IACfG,GAAW,MAiBT,yBAASnB,UAAU,kBAAnB,SAEIW,EAAMyB,KAAI,SAACrC,EAAMD,GAAP,OACR,cAAC,EAAD,CAEEF,KAAMA,EACNC,UAAWA,EACXC,EAAGA,EACHC,KAAMA,GAJDD,QAWb,yBAASE,UAAU,WAAnB,kCChHNqC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.4cdac117.chunk.js","sourcesContent":["import React from \"react\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faRedo } from \"@fortawesome/free-solid-svg-icons\";\n\nfunction Header({moves, resetGame}) {\n  return (\n    <header>\n      <div>\n        <p>Tries: {moves}</p>\n        <button\n          onClick={() => resetGame()}\n        >\n          <FontAwesomeIcon icon={faRedo} />\n        </button>\n      </div>\n      \n      <h3>Memory Game - Matching Pairs</h3>\n    </header>\n  );\n}\n\nexport default Header;","import React from \"react\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faQuestion } from \"@fortawesome/free-solid-svg-icons\";\n\nfunction Card({flip, cardClass, i, card}) {\n  return (\n    <div\n      onClick={() => flip(i, card)}\n      className={cardClass(i, card)}\n    >\n      <FontAwesomeIcon icon={cardClass(i, card) ? card : faQuestion} />\n    </div>\n  );\n}\n\nexport default Card;","import React, { useState, useEffect } from \"react\";\nimport {\n  faAngular,\n  faGithub,\n  faNodeJs,\n  faPhp,\n  faReact,\n  faVuejs\n} from \"@fortawesome/free-brands-svg-icons\";\nimport './App.scss';\nimport Header from \"./components/Header\";\nimport Card from \"./components/Card\";\n\nconst cardsArray = [\n  faReact,\n  faReact,\n  faAngular,\n  faAngular,\n  faVuejs,\n  faVuejs,\n  faNodeJs,\n  faNodeJs,\n  faGithub,\n  faGithub,\n  faPhp,\n  faPhp,\n];\n\nfunction App() {\n  const [cards, setCards] = useState([]);\n  const [cardsToMatch, setCardsToMatch] = useState([]);\n  const [matchedCard, setMatchedCard] = useState([]); // solved cards\n  const [moves, setMoves] = useState(0);\n  const [gameWon, setGameWon] = useState(false);\n  \n  // shuffle cards on load\n  useEffect(() => {\n    setCards(shuffle(cardsArray));\n  }, []);\n\n  // shuffle array of cards\n  const shuffle = cards => {\n    return cards.sort(() => Math.random() - 0.5);\n  }\n\n  const flip = (i, card) => {\n    let openedCards = [...cardsToMatch];\n    const isCurrentlyOpened = openedCards.some(card => card.id === i);\n    \n    if (isCurrentlyOpened || matchedCard.includes(card)) return;\n\n    if (openedCards.length === 2) openedCards = [];\n\n    openedCards.push({\n      id: i,\n      name: card\n    });\n    setCardsToMatch(openedCards);\n\n    // compare two cards\n    if (openedCards.length === 2) compare(openedCards);\n  }\n\n  const compare = (openedCards) => {\n    const solvedCards = matchedCard;\n\n    incrementMoves();\n\n    // is execute if two cards are the same\n    if (openedCards[0].name === openedCards[1].name) {\n      solvedCards.push(openedCards[0].name);\n      setMatchedCard(solvedCards);\n      setCardsToMatch([]);\n    }\n    \n    if (matchedCard.length === (cards.length / 2)) setGameWon(true);\n  }\n\n  const incrementMoves = () => setMoves(moves + 1);\n\n  const resetGame = () => {\n    setMoves(0);\n    setCards(shuffle(cardsArray));\n    setCardsToMatch([]);\n    setMatchedCard([]);\n    setGameWon(false);\n  }\n\n  const cardClass = (i, card) =>  {\n    if (matchedCard.includes(card)) return 'flip matched';\n    if (cardsToMatch.some(cardToMatch => cardToMatch.id === i)) return 'flip open';\n  }\n\n  return (\n    <div className={`App ${gameWon ? 'game-won' : ''}`}>\n      \n      <Header\n        moves={moves}\n        resetGame={resetGame}\n      />\n\n      {/* card section */}\n      <section className=\"cards-container\">\n        {\n          cards.map((card, i) => (\n            <Card\n              key={i}\n              flip={flip}\n              cardClass={cardClass}\n              i={i}\n              card={card}\n            />\n          ))\n        }\n      </section>\n\n      {/* Game won section */}\n      <section className=\"congrats\">You won the game</section>\n\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}